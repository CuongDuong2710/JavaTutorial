INTERFACE: a class with only abstract methods.

1. You can put fields in Interface but you have to understand that they are public, final and static (constants). They are never going to change.

2. Method in interface is 'public' and 'abstract' is default so don't need to write.

3. Interface is just an empty class that provides or tells someone what methods they must implement if they want to use. 

4. You can add as many interfaces to a class using implements as you want.

5. You can create an object from interface class.

ABSTRACT

1. Whenever you want to create a class in which every method doesn't necessarily have to be implemented to use abstract class.

2. There a no abstract fields.

3. All methods don't have to be abstract.

4. You can have static methods.

5. Abstract method doesn't have body.

6. You cannot create an object from abstract class.

7. Subclasses can only extends one abstract class.

PROTECTED

_ Same like 'private' except subclasses

============================================
STRATEGY PATTERN

http://www.newthinktank.com/2012/08/strategy-design-pattern-tutorial/

The pattern also allows you to eliminate code duplication. It separates behavior from super and subclasses